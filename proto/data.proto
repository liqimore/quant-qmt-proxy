syntax = "proto3";

package qmt.data;

import "common.proto";
import "google/protobuf/empty.proto";

// ==================== 市场数据 ====================

// 市场数据请求
message MarketDataRequest {
  repeated string stock_codes = 1;    // 股票代码列表
  string start_date = 2;              // YYYYMMDD
  string end_date = 3;                // YYYYMMDD
  common.PeriodType period = 4;       // 周期类型
  repeated string fields = 5;         // 字段列表 ["open", "close", ...]
  string adjust_type = 6;             // 复权类型 "none", "front", "back"
}

// K线数据点
message KlineBar {
  string time = 1;         // 时间戳或日期
  double open = 2;         // 开盘价
  double high = 3;         // 最高价
  double low = 4;          // 最低价
  double close = 5;        // 收盘价
  int64 volume = 6;        // 成交量
  double amount = 7;       // 成交额
}

// 市场数据响应
message MarketDataResponse {
  string stock_code = 1;
  repeated KlineBar bars = 2;
  repeated string fields = 3;
  string period = 4;
  string start_date = 5;
  string end_date = 6;
  common.Status status = 7;
}

// 批量市场数据响应
message MarketDataBatchResponse {
  repeated MarketDataResponse data = 1;
  common.Status status = 2;
}

// ==================== 财务数据 ====================

// 财务数据请求
message FinancialDataRequest {
  repeated string stock_codes = 1;
  repeated string table_list = 2;    // 财务表列表
  string start_date = 3;
  string end_date = 4;
}

// 财务数据行
message FinancialDataRow {
  map<string, string> fields = 1;    // 动态字段映射
}

// 财务数据响应
message FinancialDataResponse {
  string stock_code = 1;
  string table_name = 2;
  repeated FinancialDataRow rows = 3;
  repeated string columns = 4;
  common.Status status = 5;
}

// 批量财务数据响应
message FinancialDataBatchResponse {
  repeated FinancialDataResponse data = 1;
  common.Status status = 2;
}

// ==================== 板块数据 ====================

// 板块信息
message SectorInfo {
  string sector_name = 1;
  repeated string stock_list = 2;
  string sector_type = 3;
}

// 板块列表响应
message SectorListResponse {
  repeated SectorInfo sectors = 1;
  common.Status status = 2;
}

// ==================== 指数权重 ====================

// 指数权重请求
message IndexWeightRequest {
  string index_code = 1;
  string date = 2;  // 可选
}

// 成分股权重
message ComponentWeight {
  string stock_code = 1;
  double weight = 2;
  double market_cap = 3;
}

// 指数权重响应
message IndexWeightResponse {
  string index_code = 1;
  string date = 2;
  repeated ComponentWeight weights = 3;
  common.Status status = 4;
}

// ==================== 交易日历 ====================

// 交易日历请求
message TradingCalendarRequest {
  int32 year = 1;
}

// 交易日历响应
message TradingCalendarResponse {
  repeated string trading_dates = 1;
  repeated string holidays = 2;
  int32 year = 3;
  common.Status status = 4;
}

// ==================== 合约信息 ====================

// 合约信息请求
message InstrumentInfoRequest {
  string stock_code = 1;
}

// 合约信息响应
message InstrumentInfoResponse {
  string instrument_code = 1;
  string instrument_name = 2;
  string market_type = 3;
  string instrument_type = 4;
  string list_date = 5;
  string delist_date = 6;
  common.Status status = 7;
}

// ==================== ETF信息 ====================

// ETF信息请求
message ETFInfoRequest {
  string etf_code = 1;
}

// ETF信息响应
message ETFInfoResponse {
  string etf_code = 1;
  string etf_name = 2;
  string underlying_asset = 3;
  int64 creation_unit = 4;
  int64 redemption_unit = 5;
  common.Status status = 6;
}

// ==================== 阶段1: 基础信息接口 ====================

// 合约类型信息
message InstrumentTypeInfo {
  string stock_code = 1;
  bool index = 2;
  bool stock = 3;
  bool fund = 4;
  bool etf = 5;
  bool bond = 6;
  bool option = 7;
  bool futures = 8;
}

message InstrumentTypeRequest {
  string stock_code = 1;
}

message InstrumentTypeResponse {
  InstrumentTypeInfo data = 1;
  common.Status status = 2;
}

// 节假日信息
message HolidayInfoResponse {
  repeated string holidays = 1;
  common.Status status = 2;
}

// 可转债信息
message ConvertibleBondInfo {
  string bond_code = 1;
  string bond_name = 2;
  string stock_code = 3;
  string stock_name = 4;
  double conversion_price = 5;
  double conversion_value = 6;
  double conversion_premium_rate = 7;
  double current_price = 8;
  double par_value = 9;
  string list_date = 10;
  string maturity_date = 11;
  string conversion_begin_date = 12;
  string conversion_end_date = 13;
  map<string, string> raw_data = 14;
}

message ConvertibleBondListResponse {
  repeated ConvertibleBondInfo bonds = 1;
  common.Status status = 2;
}

// 新股申购信息
message IpoInfo {
  string security_code = 1;
  string code_name = 2;
  string market = 3;
  int64 act_issue_qty = 4;
  int64 online_issue_qty = 5;
  string online_sub_code = 6;
  int64 online_sub_max_qty = 7;
  double publish_price = 8;
  int32 is_profit = 9;
  double industry_pe = 10;
  double after_pe = 11;
  string subscribe_date = 12;
  string lottery_date = 13;
  string list_date = 14;
  map<string, string> raw_data = 15;
}

message IpoInfoListResponse {
  repeated IpoInfo ipos = 1;
  common.Status status = 2;
}

// 可用周期列表
message PeriodListResponse {
  repeated string periods = 1;
  common.Status status = 2;
}

// 数据目录
message DataDirResponse {
  string data_dir = 1;
  common.Status status = 2;
}

// ==================== 阶段2: 行情数据获取接口 ====================

// 本地数据请求
message LocalDataRequest {
  repeated string stock_codes = 1;
  string start_time = 2;
  string end_time = 3;
  string period = 4;
}

message LocalDataResponse {
  map<string, KlineDataList> data = 1;  // stock_code -> kline list
  common.Status status = 2;
}

message KlineDataList {
  repeated KlineBar bars = 1;
}

// Tick数据
message TickData {
  string time = 1;
  double last_price = 2;
  double open = 3;
  double high = 4;
  double low = 5;
  double last_close = 6;
  double amount = 7;
  int64 volume = 8;
  int64 pvolume = 9;
  int32 stock_status = 10;
  int32 open_int = 11;
  double last_settlement_price = 12;
  repeated double ask_price = 13;
  repeated double bid_price = 14;
  repeated int32 ask_vol = 15;
  repeated int32 bid_vol = 16;
  int32 transaction_num = 17;
}

message FullTickRequest {
  repeated string stock_codes = 1;
  string start_time = 2;
  string end_time = 3;
}

message FullTickResponse {
  map<string, TickDataList> data = 1;
  common.Status status = 2;
}

message TickDataList {
  repeated TickData ticks = 1;
}

// 除权数据
message DividendFactor {
  string time = 1;
  double interest = 2;
  double stock_bonus = 3;
  double stock_gift = 4;
  double allot_num = 5;
  double allot_price = 6;
  int32 gugai = 7;
  double dr = 8;
}

message DividFactorsRequest {
  string stock_code = 1;
}

message DividFactorsResponse {
  repeated DividendFactor factors = 1;
  common.Status status = 2;
}

// 完整K线数据请求
message FullKlineRequest {
  repeated string stock_codes = 1;
  string start_time = 2;
  string end_time = 3;
  string period = 4;
}

message FullKlineResponse {
  map<string, KlineDataList> data = 1;
  common.Status status = 2;
}

// ==================== 阶段3: 数据下载接口 ====================

// 下载任务状态
enum DownloadTaskStatus {
  DOWNLOAD_PENDING = 0;
  DOWNLOAD_RUNNING = 1;
  DOWNLOAD_COMPLETED = 2;
  DOWNLOAD_FAILED = 3;
}

// 下载历史数据请求
message DownloadHistoryDataRequest {
  string stock_code = 1;
  string period = 2;
  string start_time = 3;
  string end_time = 4;
  bool incrementally = 5;
}

// 批量下载请求
message DownloadHistoryDataBatchRequest {
  repeated string stock_list = 1;
  string period = 2;
  string start_time = 3;
  string end_time = 4;
}

// 下载响应
message DownloadResponse {
  string task_id = 1;
  DownloadTaskStatus status = 2;
  double progress = 3;
  int32 total = 4;
  int32 finished = 5;
  string message = 6;
  string current_stock = 7;
  common.Status rpc_status = 8;
}

// 下载财务数据请求
message DownloadFinancialDataRequest {
  repeated string stock_list = 1;
  repeated string table_list = 2;
  string start_date = 3;
  string end_date = 4;
}

// 下载指数权重请求
message DownloadIndexWeightRequest {
  string index_code = 1;
}

// 下载历史合约请求
message DownloadHistoryContractsRequest {
  string market = 1;
}

// ==================== 阶段4: 板块管理接口 ====================

// 创建板块文件夹请求
message CreateSectorFolderRequest {
  string parent_node = 1;
  string folder_name = 2;
  bool overwrite = 3;
}

message CreateSectorFolderResponse {
  string created_name = 1;
  common.Status status = 2;
}

// 创建板块请求
message CreateSectorRequest {
  string parent_node = 1;
  string sector_name = 2;
  bool overwrite = 3;
}

message CreateSectorResponse {
  string created_name = 1;
  common.Status status = 2;
}

// 添加板块请求
message AddSectorRequest {
  string sector_name = 1;
  repeated string stock_list = 2;
}

message AddSectorResponse {
  common.Status status = 1;
}

// 移除板块成分股请求
message RemoveStockFromSectorRequest {
  string sector_name = 1;
  repeated string stock_list = 2;
}

message RemoveStockFromSectorResponse {
  bool success = 1;
  common.Status status = 2;
}

// 移除板块请求
message RemoveSectorRequest {
  string sector_name = 1;
}

message RemoveSectorResponse {
  common.Status status = 1;
}

// 重置板块请求
message ResetSectorRequest {
  string sector_name = 1;
  repeated string stock_list = 2;
}

message ResetSectorResponse {
  bool success = 1;
  common.Status status = 2;
}

// ==================== 阶段5: Level2数据接口 ====================

// Level2快照数据
message L2QuoteData {
  string time = 1;
  double last_price = 2;
  double open = 3;
  double high = 4;
  double low = 5;
  double amount = 6;
  int64 volume = 7;
  int64 pvolume = 8;
  int32 open_int = 9;
  int32 stock_status = 10;
  int32 transaction_num = 11;
  double last_close = 12;
  double last_settlement_price = 13;
  double settlement_price = 14;
  double pe = 15;
  repeated double ask_price = 16;  // 10档
  repeated double bid_price = 17;  // 10档
  repeated int32 ask_vol = 18;
  repeated int32 bid_vol = 19;
}

message L2QuoteRequest {
  repeated string stock_codes = 1;
  string start_time = 2;
  string end_time = 3;
}

message L2QuoteResponse {
  map<string, L2QuoteDataList> data = 1;
  common.Status status = 2;
}

message L2QuoteDataList {
  repeated L2QuoteData quotes = 1;
}

// Level2逐笔委托
message L2OrderData {
  string time = 1;
  double price = 2;
  int32 volume = 3;
  int64 entrust_no = 4;
  int32 entrust_type = 5;
  int32 entrust_direction = 6;
}

message L2OrderRequest {
  repeated string stock_codes = 1;
  string start_time = 2;
  string end_time = 3;
}

message L2OrderResponse {
  map<string, L2OrderDataList> data = 1;
  common.Status status = 2;
}

message L2OrderDataList {
  repeated L2OrderData orders = 1;
}

// Level2逐笔成交
message L2TransactionData {
  string time = 1;
  double price = 2;
  int32 volume = 3;
  double amount = 4;
  int64 trade_index = 5;
  int64 buy_no = 6;
  int64 sell_no = 7;
  int32 trade_type = 8;
  int32 trade_flag = 9;
}

message L2TransactionRequest {
  repeated string stock_codes = 1;
  string start_time = 2;
  string end_time = 3;
}

message L2TransactionResponse {
  map<string, L2TransactionDataList> data = 1;
  common.Status status = 2;
}

message L2TransactionDataList {
  repeated L2TransactionData transactions = 1;
}

// ==================== 数据服务定义 ====================

service DataService {
  // ===== 原有接口 =====
  // 获取市场数据（一元调用）
  rpc GetMarketData(MarketDataRequest) returns (MarketDataBatchResponse);
  
  // 获取财务数据（一元调用）
  rpc GetFinancialData(FinancialDataRequest) returns (FinancialDataBatchResponse);
  
  // 获取板块列表（一元调用）
  rpc GetSectorList(google.protobuf.Empty) returns (SectorListResponse);
  
  // 获取指数权重（一元调用）
  rpc GetIndexWeight(IndexWeightRequest) returns (IndexWeightResponse);
  
  // 获取交易日历（一元调用）
  rpc GetTradingCalendar(TradingCalendarRequest) returns (TradingCalendarResponse);
  
  // 获取合约信息（一元调用）
  rpc GetInstrumentInfo(InstrumentInfoRequest) returns (InstrumentInfoResponse);
  
  // 获取ETF信息（一元调用）
  rpc GetETFInfo(ETFInfoRequest) returns (ETFInfoResponse);
  
  // ===== 阶段1: 基础信息接口 =====
  // 获取合约类型
  rpc GetInstrumentType(InstrumentTypeRequest) returns (InstrumentTypeResponse);
  
  // 获取节假日列表
  rpc GetHolidays(google.protobuf.Empty) returns (HolidayInfoResponse);
  
  // 获取可转债信息
  rpc GetConvertibleBondInfo(google.protobuf.Empty) returns (ConvertibleBondListResponse);
  
  // 获取新股申购信息
  rpc GetIpoInfo(google.protobuf.Empty) returns (IpoInfoListResponse);
  
  // 获取可用周期列表
  rpc GetPeriodList(google.protobuf.Empty) returns (PeriodListResponse);
  
  // 获取本地数据路径
  rpc GetDataDir(google.protobuf.Empty) returns (DataDirResponse);
  
  // ===== 阶段2: 行情数据获取接口 =====
  // 获取本地行情数据
  rpc GetLocalData(LocalDataRequest) returns (LocalDataResponse);
  
  // 获取完整tick数据
  rpc GetFullTick(FullTickRequest) returns (FullTickResponse);
  
  // 获取除权数据
  rpc GetDividFactors(DividFactorsRequest) returns (DividFactorsResponse);
  
  // 获取完整K线数据
  rpc GetFullKline(FullKlineRequest) returns (FullKlineResponse);
  
  // ===== 阶段3: 数据下载接口 =====
  // 下载历史数据（单只）
  rpc DownloadHistoryData(DownloadHistoryDataRequest) returns (DownloadResponse);
  
  // 批量下载历史数据
  rpc DownloadHistoryDataBatch(DownloadHistoryDataBatchRequest) returns (DownloadResponse);
  
  // 下载财务数据
  rpc DownloadFinancialData(DownloadFinancialDataRequest) returns (DownloadResponse);
  
  // 批量下载财务数据
  rpc DownloadFinancialDataBatch(DownloadFinancialDataRequest) returns (DownloadResponse);
  
  // 下载板块数据
  rpc DownloadSectorData(google.protobuf.Empty) returns (DownloadResponse);
  
  // 下载指数权重
  rpc DownloadIndexWeight(DownloadIndexWeightRequest) returns (DownloadResponse);
  
  // 下载可转债数据
  rpc DownloadCBData(google.protobuf.Empty) returns (DownloadResponse);
  
  // 下载ETF信息
  rpc DownloadETFInfo(google.protobuf.Empty) returns (DownloadResponse);
  
  // 下载节假日数据
  rpc DownloadHolidayData(google.protobuf.Empty) returns (DownloadResponse);
  
  // 下载历史合约数据
  rpc DownloadHistoryContracts(DownloadHistoryContractsRequest) returns (DownloadResponse);
  
  // ===== 阶段4: 板块管理接口 =====
  // 创建板块文件夹
  rpc CreateSectorFolder(CreateSectorFolderRequest) returns (CreateSectorFolderResponse);
  
  // 创建板块
  rpc CreateSector(CreateSectorRequest) returns (CreateSectorResponse);
  
  // 添加股票到板块
  rpc AddSector(AddSectorRequest) returns (AddSectorResponse);
  
  // 从板块移除股票
  rpc RemoveStockFromSector(RemoveStockFromSectorRequest) returns (RemoveStockFromSectorResponse);
  
  // 删除板块
  rpc RemoveSector(RemoveSectorRequest) returns (RemoveSectorResponse);
  
  // 重置板块
  rpc ResetSector(ResetSectorRequest) returns (ResetSectorResponse);
  
  // ===== 阶段5: Level2数据接口 =====
  // 获取Level2快照数据
  rpc GetL2Quote(L2QuoteRequest) returns (L2QuoteResponse);
  
  // 获取Level2逐笔委托
  rpc GetL2Order(L2OrderRequest) returns (L2OrderResponse);
  
  // 获取Level2逐笔成交
  rpc GetL2Transaction(L2TransactionRequest) returns (L2TransactionResponse);
}
