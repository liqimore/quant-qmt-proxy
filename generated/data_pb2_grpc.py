# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from generated import data_pb2 as data__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.76.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + ' but the generated code in data_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DataServiceStub(object):
    """==================== 数据服务定义 ====================

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetMarketData = channel.unary_unary(
                '/qmt.data.DataService/GetMarketData',
                request_serializer=data__pb2.MarketDataRequest.SerializeToString,
                response_deserializer=data__pb2.MarketDataBatchResponse.FromString,
                _registered_method=True)
        self.GetFinancialData = channel.unary_unary(
                '/qmt.data.DataService/GetFinancialData',
                request_serializer=data__pb2.FinancialDataRequest.SerializeToString,
                response_deserializer=data__pb2.FinancialDataBatchResponse.FromString,
                _registered_method=True)
        self.GetSectorList = channel.unary_unary(
                '/qmt.data.DataService/GetSectorList',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=data__pb2.SectorListResponse.FromString,
                _registered_method=True)
        self.GetIndexWeight = channel.unary_unary(
                '/qmt.data.DataService/GetIndexWeight',
                request_serializer=data__pb2.IndexWeightRequest.SerializeToString,
                response_deserializer=data__pb2.IndexWeightResponse.FromString,
                _registered_method=True)
        self.GetTradingCalendar = channel.unary_unary(
                '/qmt.data.DataService/GetTradingCalendar',
                request_serializer=data__pb2.TradingCalendarRequest.SerializeToString,
                response_deserializer=data__pb2.TradingCalendarResponse.FromString,
                _registered_method=True)
        self.GetInstrumentInfo = channel.unary_unary(
                '/qmt.data.DataService/GetInstrumentInfo',
                request_serializer=data__pb2.InstrumentInfoRequest.SerializeToString,
                response_deserializer=data__pb2.InstrumentInfoResponse.FromString,
                _registered_method=True)
        self.GetETFInfo = channel.unary_unary(
                '/qmt.data.DataService/GetETFInfo',
                request_serializer=data__pb2.ETFInfoRequest.SerializeToString,
                response_deserializer=data__pb2.ETFInfoResponse.FromString,
                _registered_method=True)


class DataServiceServicer(object):
    """==================== 数据服务定义 ====================

    """

    def GetMarketData(self, request, context):
        """获取市场数据（一元调用）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFinancialData(self, request, context):
        """获取财务数据（一元调用）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSectorList(self, request, context):
        """获取板块列表（一元调用）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetIndexWeight(self, request, context):
        """获取指数权重（一元调用）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTradingCalendar(self, request, context):
        """获取交易日历（一元调用）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInstrumentInfo(self, request, context):
        """获取合约信息（一元调用）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetETFInfo(self, request, context):
        """获取ETF信息（一元调用）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetMarketData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMarketData,
                    request_deserializer=data__pb2.MarketDataRequest.FromString,
                    response_serializer=data__pb2.MarketDataBatchResponse.SerializeToString,
            ),
            'GetFinancialData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFinancialData,
                    request_deserializer=data__pb2.FinancialDataRequest.FromString,
                    response_serializer=data__pb2.FinancialDataBatchResponse.SerializeToString,
            ),
            'GetSectorList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSectorList,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=data__pb2.SectorListResponse.SerializeToString,
            ),
            'GetIndexWeight': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIndexWeight,
                    request_deserializer=data__pb2.IndexWeightRequest.FromString,
                    response_serializer=data__pb2.IndexWeightResponse.SerializeToString,
            ),
            'GetTradingCalendar': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTradingCalendar,
                    request_deserializer=data__pb2.TradingCalendarRequest.FromString,
                    response_serializer=data__pb2.TradingCalendarResponse.SerializeToString,
            ),
            'GetInstrumentInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInstrumentInfo,
                    request_deserializer=data__pb2.InstrumentInfoRequest.FromString,
                    response_serializer=data__pb2.InstrumentInfoResponse.SerializeToString,
            ),
            'GetETFInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetETFInfo,
                    request_deserializer=data__pb2.ETFInfoRequest.FromString,
                    response_serializer=data__pb2.ETFInfoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'qmt.data.DataService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('qmt.data.DataService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DataService(object):
    """==================== 数据服务定义 ====================

    """

    @staticmethod
    def GetMarketData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qmt.data.DataService/GetMarketData',
            data__pb2.MarketDataRequest.SerializeToString,
            data__pb2.MarketDataBatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFinancialData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qmt.data.DataService/GetFinancialData',
            data__pb2.FinancialDataRequest.SerializeToString,
            data__pb2.FinancialDataBatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSectorList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qmt.data.DataService/GetSectorList',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            data__pb2.SectorListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetIndexWeight(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qmt.data.DataService/GetIndexWeight',
            data__pb2.IndexWeightRequest.SerializeToString,
            data__pb2.IndexWeightResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTradingCalendar(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qmt.data.DataService/GetTradingCalendar',
            data__pb2.TradingCalendarRequest.SerializeToString,
            data__pb2.TradingCalendarResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetInstrumentInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qmt.data.DataService/GetInstrumentInfo',
            data__pb2.InstrumentInfoRequest.SerializeToString,
            data__pb2.InstrumentInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetETFInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qmt.data.DataService/GetETFInfo',
            data__pb2.ETFInfoRequest.SerializeToString,
            data__pb2.ETFInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
