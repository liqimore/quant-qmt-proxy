# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from generated import trading_pb2 as trading__pb2

GRPC_GENERATED_VERSION = '1.76.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + ' but the generated code in trading_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TradingServiceStub(object):
    """==================== 交易服务定义 ====================

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Connect = channel.unary_unary(
                '/qmt.trading.TradingService/Connect',
                request_serializer=trading__pb2.ConnectRequest.SerializeToString,
                response_deserializer=trading__pb2.ConnectResponse.FromString,
                _registered_method=True)
        self.Disconnect = channel.unary_unary(
                '/qmt.trading.TradingService/Disconnect',
                request_serializer=trading__pb2.DisconnectRequest.SerializeToString,
                response_deserializer=trading__pb2.DisconnectResponse.FromString,
                _registered_method=True)
        self.GetAccountInfo = channel.unary_unary(
                '/qmt.trading.TradingService/GetAccountInfo',
                request_serializer=trading__pb2.DisconnectRequest.SerializeToString,
                response_deserializer=trading__pb2.ConnectResponse.FromString,
                _registered_method=True)
        self.GetPositions = channel.unary_unary(
                '/qmt.trading.TradingService/GetPositions',
                request_serializer=trading__pb2.PositionRequest.SerializeToString,
                response_deserializer=trading__pb2.PositionListResponse.FromString,
                _registered_method=True)
        self.SubmitOrder = channel.unary_unary(
                '/qmt.trading.TradingService/SubmitOrder',
                request_serializer=trading__pb2.OrderRequest.SerializeToString,
                response_deserializer=trading__pb2.OrderResponse.FromString,
                _registered_method=True)
        self.CancelOrder = channel.unary_unary(
                '/qmt.trading.TradingService/CancelOrder',
                request_serializer=trading__pb2.CancelOrderRequest.SerializeToString,
                response_deserializer=trading__pb2.CancelOrderResponse.FromString,
                _registered_method=True)
        self.GetOrders = channel.unary_unary(
                '/qmt.trading.TradingService/GetOrders',
                request_serializer=trading__pb2.OrderListRequest.SerializeToString,
                response_deserializer=trading__pb2.OrderListResponse.FromString,
                _registered_method=True)
        self.GetTrades = channel.unary_unary(
                '/qmt.trading.TradingService/GetTrades',
                request_serializer=trading__pb2.TradeListRequest.SerializeToString,
                response_deserializer=trading__pb2.TradeListResponse.FromString,
                _registered_method=True)
        self.GetAsset = channel.unary_unary(
                '/qmt.trading.TradingService/GetAsset',
                request_serializer=trading__pb2.AssetRequest.SerializeToString,
                response_deserializer=trading__pb2.AssetResponse.FromString,
                _registered_method=True)
        self.GetRiskInfo = channel.unary_unary(
                '/qmt.trading.TradingService/GetRiskInfo',
                request_serializer=trading__pb2.RiskInfoRequest.SerializeToString,
                response_deserializer=trading__pb2.RiskInfoResponse.FromString,
                _registered_method=True)
        self.GetStrategies = channel.unary_unary(
                '/qmt.trading.TradingService/GetStrategies',
                request_serializer=trading__pb2.StrategyListRequest.SerializeToString,
                response_deserializer=trading__pb2.StrategyListResponse.FromString,
                _registered_method=True)


class TradingServiceServicer(object):
    """==================== 交易服务定义 ====================

    """

    def Connect(self, request, context):
        """连接账户（一元调用）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Disconnect(self, request, context):
        """断开账户（一元调用）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAccountInfo(self, request, context):
        """获取账户信息（一元调用）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPositions(self, request, context):
        """获取持仓列表（一元调用）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitOrder(self, request, context):
        """提交订单（一元调用）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelOrder(self, request, context):
        """撤销订单（一元调用）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrders(self, request, context):
        """获取订单列表（一元调用）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTrades(self, request, context):
        """获取成交记录（一元调用）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAsset(self, request, context):
        """获取资产信息（一元调用）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRiskInfo(self, request, context):
        """获取风险信息（一元调用）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStrategies(self, request, context):
        """获取策略列表（一元调用）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TradingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Connect': grpc.unary_unary_rpc_method_handler(
                    servicer.Connect,
                    request_deserializer=trading__pb2.ConnectRequest.FromString,
                    response_serializer=trading__pb2.ConnectResponse.SerializeToString,
            ),
            'Disconnect': grpc.unary_unary_rpc_method_handler(
                    servicer.Disconnect,
                    request_deserializer=trading__pb2.DisconnectRequest.FromString,
                    response_serializer=trading__pb2.DisconnectResponse.SerializeToString,
            ),
            'GetAccountInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAccountInfo,
                    request_deserializer=trading__pb2.DisconnectRequest.FromString,
                    response_serializer=trading__pb2.ConnectResponse.SerializeToString,
            ),
            'GetPositions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPositions,
                    request_deserializer=trading__pb2.PositionRequest.FromString,
                    response_serializer=trading__pb2.PositionListResponse.SerializeToString,
            ),
            'SubmitOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitOrder,
                    request_deserializer=trading__pb2.OrderRequest.FromString,
                    response_serializer=trading__pb2.OrderResponse.SerializeToString,
            ),
            'CancelOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelOrder,
                    request_deserializer=trading__pb2.CancelOrderRequest.FromString,
                    response_serializer=trading__pb2.CancelOrderResponse.SerializeToString,
            ),
            'GetOrders': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrders,
                    request_deserializer=trading__pb2.OrderListRequest.FromString,
                    response_serializer=trading__pb2.OrderListResponse.SerializeToString,
            ),
            'GetTrades': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTrades,
                    request_deserializer=trading__pb2.TradeListRequest.FromString,
                    response_serializer=trading__pb2.TradeListResponse.SerializeToString,
            ),
            'GetAsset': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAsset,
                    request_deserializer=trading__pb2.AssetRequest.FromString,
                    response_serializer=trading__pb2.AssetResponse.SerializeToString,
            ),
            'GetRiskInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRiskInfo,
                    request_deserializer=trading__pb2.RiskInfoRequest.FromString,
                    response_serializer=trading__pb2.RiskInfoResponse.SerializeToString,
            ),
            'GetStrategies': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStrategies,
                    request_deserializer=trading__pb2.StrategyListRequest.FromString,
                    response_serializer=trading__pb2.StrategyListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'qmt.trading.TradingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('qmt.trading.TradingService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TradingService(object):
    """==================== 交易服务定义 ====================

    """

    @staticmethod
    def Connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qmt.trading.TradingService/Connect',
            trading__pb2.ConnectRequest.SerializeToString,
            trading__pb2.ConnectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Disconnect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qmt.trading.TradingService/Disconnect',
            trading__pb2.DisconnectRequest.SerializeToString,
            trading__pb2.DisconnectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAccountInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qmt.trading.TradingService/GetAccountInfo',
            trading__pb2.DisconnectRequest.SerializeToString,
            trading__pb2.ConnectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPositions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qmt.trading.TradingService/GetPositions',
            trading__pb2.PositionRequest.SerializeToString,
            trading__pb2.PositionListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubmitOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qmt.trading.TradingService/SubmitOrder',
            trading__pb2.OrderRequest.SerializeToString,
            trading__pb2.OrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qmt.trading.TradingService/CancelOrder',
            trading__pb2.CancelOrderRequest.SerializeToString,
            trading__pb2.CancelOrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qmt.trading.TradingService/GetOrders',
            trading__pb2.OrderListRequest.SerializeToString,
            trading__pb2.OrderListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTrades(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qmt.trading.TradingService/GetTrades',
            trading__pb2.TradeListRequest.SerializeToString,
            trading__pb2.TradeListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAsset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qmt.trading.TradingService/GetAsset',
            trading__pb2.AssetRequest.SerializeToString,
            trading__pb2.AssetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRiskInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qmt.trading.TradingService/GetRiskInfo',
            trading__pb2.RiskInfoRequest.SerializeToString,
            trading__pb2.RiskInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStrategies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qmt.trading.TradingService/GetStrategies',
            trading__pb2.StrategyListRequest.SerializeToString,
            trading__pb2.StrategyListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
